										Spring boot basic
										==================
1 : define a spring boot?
2 : differnce between spring-boot and spring?
3 : what is mean by spring initiliazer?

4 : what is Spring-boot embedded server?
--> spring boot provided tomcat embedded server ?

5 : Running spring-boot apps?
--> java -jar target/jar-file-name 

6 : Spring-boot FAQ : frequnnety asked question
	A : does spring-boot replace spring MVC ,Spring REST , Spring Core , Spring AOP etc?
	->: No : instead spring boot actually uses thoses technologies in the background
	
	B : does Spring boot code run faster than regular spring code?
	->: No
	->: Behind the scenes,Spring boot uses same code of Spring Framework.[spring MVC ,Spring REST , Spring Core]\
	
	c : Do i need specail IDE for Spring boot?
	->: no
	->: you van used any IDE for Spring-boot even use plain text editor
	
	
7 : spring boot initiliazer Demo?
--> spring-boot initiliazer is used to create a "starter spring project".
--> search : spring.io
-->step  : A
=========
1 : project : mavne
2 : language: java
3 : spring boot version : 3.1.0
4 : project Metadate
	1 : group ID: com.tanveer
	2 : artifact: quizapp [ name of my application]
	3 : name : quizapp
	4 : description : Tanveer Quize Application
	5 : package name : com.tanveer.quizapp
	6 : packaging : jar
	7 : java version : 17

step : B
========
dependency :
------------

1 : Spring Web
4 : lombok
5 : swagger
<dependency>
		<groupId>org.springdoc</groupId>
		<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
		<version>2.0.0</version>
</dependency>

									Maven
									=====

8 : whta is Maven?
--> Maven is project Management tool
--> Maven is used for build management and dependencies.


8 : what problems Does maven solve?
problem :
--------
--> when building your java project, you may need additional JAR files
--> for example : Spring , Hibernate , Commons Logging , JSON etc.
--> one approach is to download the JAr files from each project.
--> Manually add the JAR files to your build path or class path.

Maven solution
--------------
--> tell Maven to i need this dependency
--> for example : Spring , Hibernate , Commons Logging , JSON etc.
--> Maven will go out and download the JAR files for those project for you
--> And Maven will make those JAR files available during a compile / run time
--> Think of MAven as your friendly helper.

9 : how maven work?
------------------
steps:
1 : give to config file to maven : [ give the shopping list to maven]
2 : Maven Read the Config file
3 : Maven will check in your maven locally repository :[ your computer]
4 : if we do not have file in the local repository maven check on the central repository.[ Maven central repository (remote)]
5 : Maven save the files in the local repository.
6 : Maven is build and run.

10 : Handling JAR Dependncies?
-----------------------------
--> when Maven retrieves a project dependency
--> It will also download supporting dependencies
--> Maven will handle this for us automagically.
 
11 : building and Running?
--------------------------
--> When you build and run you appllication
--> Maven will handle class or build path for you
--> based on config file , Maven will Add JAR files accordingly


12 : Maven project structure?
-----------------------------
--> maven provided a standard Directory Structure
1 : pom.xml 		   : maven configuration file 
2 : src/ maim/jave     : your java source code
3 : src/maim/resources : properties / config file used by your app
4 : src/maim/webapp    : JSP file and web config files other web assests (images ,css, js etc) 
5 : src/test 		   : unit testing code
6 : target             : Destination directory for compiled code. automatically created by maven 

13 : what is benefits of Standard Directory structure?
------------------------------------------------------
--> For new developer joining a project
--> they can easily find code, properties files, unit test , web files etc


14 : advantages of Maven
------------------------
1 : Dependency management
	--> Maven will find JAR files for you
	--> No more missings JAR
2 : Building and Running your project
	--> no more build path or class path issue
3 : standard directory structure

									Pom.xml
									=======

15 : maven key concepts
-----------------------
A : POM file
-----------
--> POM standard for : project object model file
--> POM file is configuration file for your project : basically your " shopping list" for Maven.
--> POM file is always located in the root of your maven project.

B : POM file structure
---------------------
POM.XML
		project meta data
		dependencies
		plugins
		
project meta data
-----------------
--> project name, version etc
--> output file : JAR , WAR

dependencies
------------
--> List of dependencies we required for project
--> web , lombok , swagger , jpa etc

16 : project Coordinates
------------------------
--> Project Coordinates is used to uniquely identify a project.
--> for example  : gps Coordinates for your house : [ latitude / longitude ]
--> Project Coordinates give ful l information for finding your house : [ city , street , house no]
--> project Coordinates is  also refered as GAV : groupId , artifactId , version

	<groupId>com.tanveer</groupId>      -------------------> city
	<artifactId>mycoolapp</artifactId>  -------------------> street
	<version>0.0.1-SNAPSHOT</version>  --------------------> house number
	
	
17 : project Coordinates  elements
--------------------------------- 
--> they are three elements
--> 
--> groupId    : Name of company , group or organization : com.tanveer
--> artifactId : name of this project :  mycoolapp
--> version    : A specific release version like : 0.1 , 1.6 , 2.0
			   : if project is under active development then used SNAPSHOT : 0.0.1-SNAPSHOT


18 : dependency Coordinates
---------------------------
--> to add give dependency to your project , we nedd
--> groupId , artifactId , version
--> we can also refered as " GAV ".

19 : how to find dependency Coordinates
---------------------------------------
--> vist  hhtp://search.maven.org on the chrome


20 : what is used of spring-boot-starter-web dependency?
--> Spring-boot-starter is collection of maven dependencies and compatible version.
1 : spring-web
2 : spring-webmvc-ui
3 : hibernate-validator
4 : tomcat
5 : spring-boot-starter

21 : what is used of spring-boot-maven-plugin ? 
--> this plugin is used to package excutable jar file or war 
--> using this pligin easily run the app.
--> mvn spring-boot:run


								Resouces package
								=================

22 : what is used of Application.properties
-------------------------------------------
--> by default , spring-boot will load properties from : application.properties
--> application properties is created by spring initiliazer.
--> application.properties empty at the beginning
--> we can add spring boot properties
example : server.port=1111
		  team.name = ppay-team

23 : how to read data from application properties?
--------------------------------------------------
--> Read data from : application.properties
--> using @Value("${ team.name}")
	private String  teamName


24 : what is used of static package ?
-----------------------------------
--> by default spring-boot will load static resources from "/static" directory.
--> example od static resources HTML file, CSS , JavaScript , images etc.

25 : what is used of template package ?
-----------------------------------
--> by default sprin-boot will load template resources from "/template" directory.



21 : Developmen process of spring boot project ?
1 : Create a project using spring boot initiliazer. : [ start.spring.io]
2 : download the zip file
3 : Unzip the file
4 :  import the project into our IDE



22 : create a rest controller?
--> create a package : rest
--> inside a package create a " controllerClass"
--> annotated a class as
1 : @RestController
--> expose the end point


23 : Goals of Spring
1 : Lighweight development with Java Pojos : plane-old-java-objects
2 : Dependency injection to promote loose coupling.
3 : minimize boilerplate java code

