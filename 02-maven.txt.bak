									Maven
									=====

1 : whta is Maven?
--> Maven is project Management tool
--> Maven is used for build management and dependencies.


2 : what problems Does maven solve?
problem :
--------
--> when building your java project, you may need additional JAR files
--> for example : Spring , Hibernate , Commons Logging , JSON etc.
--> one approach is to download the JAr files from each project.
--> Manually add the JAR files to your build path or class path.

Maven solution
--------------
--> tell Maven to i need this dependency
--> for example : Spring , Hibernate , Commons Logging , JSON etc.
--> Maven will go out and download the JAR files for those project for you
--> And Maven will make those JAR files available during a compile / run time
--> Think of MAven as your friendly helper.

3 : how maven work?
------------------
steps:
1 : give to config file to maven : [ give the shopping list to maven]
2 : Maven Read the Config file
3 : Maven will check in your maven locally repository :[ your computer]
4 : if we do not have file in the local repository maven check on the central repository.[ Maven central repository (remote)]
5 : Maven save the files in the local repository.
6 : Maven is build and run.

4 : Handling JAR Dependncies?
-----------------------------
--> when Maven retrieves a project dependency
--> It will also download supporting dependencies
--> Maven will handle this for us automagically.
 
5 : building and Running?
--------------------------
--> When you build and run you appllication
--> Maven will handle class or build path for you
--> based on config file , Maven will Add JAR files accordingly


6 : Maven project structure?
-----------------------------
--> maven provided a standard Directory Structure
1 : pom.xml 		   : maven configuration file 
2 : src/ maim/jave     : your java source code
3 : src/maim/resources : properties / config file used by your app
4 : src/maim/webapp    : JSP file and web config files other web assests (images ,css, js etc) 
5 : src/test 		   : unit testing code
6 : target             : Destination directory for compiled code. automatically created by maven 

7 : what is benefits of Standard Directory structure?
------------------------------------------------------
--> For new developer joining a project
--> they can easily find code, properties files, unit test , web files etc


8 : advantages of Maven
------------------------
1 : Dependency management
	--> Maven will find JAR files for you
	--> No more missings JAR
2 : Building and Running your project
	--> no more build path or class path issue
3 : standard directory structure

									Pom.xml
									=======

9 : maven key concepts
-----------------------
A : POM file
-----------
--> POM standard for : project object model file
--> POM file is configuration file for your project : basically your " shopping list" for Maven.
--> POM file is always located in the root of your maven project.

B : POM file structure
---------------------
POM.XML
		project meta data
		dependencies
		plugins
		
project meta data
-----------------
--> project name, version etc
--> output file : JAR , WAR

dependencies
------------
--> List of dependencies we required for project
--> web , lombok , swagger , jpa etc

10 : project Coordinates
------------------------
--> Project Coordinates is used to uniquely identify a project.
--> for example  : gps Coordinates for your house : [ latitude / longitude ]
--> Project Coordinates give ful l information for finding your house : [ city , street , house no]
--> project Coordinates is  also refered as GAV : groupId , artifactId , version

	<groupId>com.tanveer</groupId>      -------------------> city
	<artifactId>mycoolapp</artifactId>  -------------------> street
	<version>0.0.1-SNAPSHOT</version>  --------------------> house number
	
	
11 : project Coordinates  elements
--------------------------------- 
--> they are three elements
--> 
--> groupId    : Name of company , group or organization : com.tanveer
--> artifactId : name of this project :  mycoolapp
--> version    : A specific release version like : 0.1 , 1.6 , 2.0
			   : if project is under active development then used SNAPSHOT : 0.0.1-SNAPSHOT


12 : dependency Coordinates
---------------------------
--> to add give dependency to your project , we nedd
--> groupId , artifactId , version
--> we can also refered as " GAV ".

13 : how to find dependency Coordinates
---------------------------------------
--> vist  hhtp://search.maven.org on the chrome


14 : what is used of spring-boot-starter-web dependency?
--> Spring-boot-starter is collection of maven dependencies and compatible version.
1 : spring-web
2 : spring-webmvc-ui
3 : hibernate-validator
4 : tomcat
5 : spring-boot-starter

15 : what is used of spring-boot-maven-plugin ? 
--> this plugin is used to package excutable jar file or war 
--> using this pligin easily run the app.
--> mvn spring-boot:run


							Resouces package
							=================

15 : what is used of Application.properties
-------------------------------------------
--> by default , spring-boot will load properties from : application.properties
--> application properties is created by spring initiliazer.
--> application.properties empty at the beginning
--> we can add spring boot properties
example : server.port=1111
		  team.name = ppay-team

16 : how to read data from application properties?
--------------------------------------------------
--> Read data from : application.properties
--> using @Value("${ team.name}")
	private String  teamName


17 : what is used of static package ?
-----------------------------------
--> by default spring-boot will load static resources from "/static" directory.
--> example od static resources HTML file, CSS , JavaScript , images etc.

18 : what is used of template package ?
-----------------------------------
--> by default sprin-boot will load template resources from "/template" directory.
