										Garbage collections / collector
										===============================
										

GC : destroye the usless object ,
garbage collector is the part of Jvm
jvm is responsible to run garbage collector

													1 : introduction
													===================
													

1 : what is mean by grabage in programming?
----------------------------------------
--> usless object are called garbage.
--> the object which are not using , west or usless such types of object are grabage.

2 : who is responsible for collect the grabage?
-----------------------------------------------
--> grabage collector is responsible for collect the grabage or usless object.
												
3 : what is garbage collection ?
------------------------------
--> garbage collector will collect the grabage or usless object and the process is called garbage collections.

4 : need of grabage collector?
-----------------------------
old language
----------
--> in old language : C++ programmer is responsible for create an object using new keyword.
	Student stud = new Student();
--> delete keyword is used to delete the object in the old language.
--> beacause of programmer negelating deleting the usless object memomry will full.application will be down we will get " out of memomry error " in old language.

java
----
--> in java programmer is responsible for creating the object.
--> in java usless object are destroye by grabage collector. 
--> GC is always running in the background.

--> the need of garbage collector to destroye usless object.
--> GC is always running in the background.
--> background executing threads are called as "Daemon Threads".
--> Garbage collector is Daemon threads beacause it is always running in the background.

5 : when we say that object is eligible fo garbage collector?
-------------------------------------------------------------
--> if the object does not conatin any refernce varaibale is eligible for GC.


												way to make an object eligible for garbage collector
												=====================================================
												

6 : how many way to make an object eligible for garbage collector?
------------------------------------------------------------------
--> they are four way are there :
	1 : Nullifying the refernce varaibale
	2 : reasign the refernce varaibale
	3 : object created inside a method
	4 : Island of isolation
	
	
7 : what is mean by Nullifying the refernce varaibale?
-----------------------------------------------------
	Student s1 = new Student();
	Student s2 = new Student();
--> in above no object is eligible for GC 

--> if we assign s1 refernce varaibale to null [ s1 = null; ] s1 object is eligible for GC. 

8 : what is Reasign the refernce varaibale ?
--------------------------------------------
	Student s1 = new Student();
	Student s2 = new Student();
--> in above no object is eligible for GC 
--> reasign a refernce to new object 
	s1 = new Student();
--> here one object eligible for Gc  : top of the above s1 is eligible for Gc
	s1 = s2 ;
--> here two object eligible for Gc  : top of the above s1 and s2is eligible for Gc

9 : what is mean that object created inside a method?
-----------------------------------------------------
--> the object created inside a method are default eligible for garbage colletor onces a methode execution is complete.

class Test
{
	public static void main(String args[])
		{
			m1();
		}
		
	public static void m1()
		{
			Student s1 = new Student();
			Student s2 = new Student();
		}
}

--> here two object are eligible for Gc : s1 and s2
--> here s1 and s2 are local varaibale 
--> when we executing a method a local varaibale is created and onces a methode execution is complete  local varaibale is gone.


10 : what is mean by Island of isolation?
----------------------------------------
--> 

class Test
{
	Test i ;
	public static void m1()
		{
			Test t1 = new Test();
			Test t2 = new Test();
			Test t3 = new Test();
			
			t1.i = t2;
			t2.i = t3;
			t3.i = t1;
			
			t1 = null;
			t2 = null;
		}
}
--> here no object is eligible fo Gc.

class Test
{
	Test i ;
	public static void m1()
		{
			Test t1 = new Test();
			Test t2 = new Test();
			Test t3 = new Test();
			
			t1.i = t2;
			t2.i = t3;
			t3.i = t1;
			
			t1 = null;
			t2 = null;
			t3 = null;
		}
}
--> here 3 object is eligible for gc.

note :
1 : the object does not have any refernce varaibale is eligible for garbage collector.
2 : the object have refernce varaibale hava  it may be an eligible for garbage collector ( if all refernce are internal refernces) . [Island of isolation ].

11 : who is responsible to run a grabage collector?
--------------------------------------------------
--> JVM is responsible to run a garbage collector

12 : when usless object is destroye by Gc?
----------------------------------------
--> when we make object is eligible for GC 
--> GC not imedaitely destroye the usless object
--> when JVM run the Gc then only object is destroye.
		
13 : when JVM run GC?
--------------------
--> but when exactly JVM runs Gc we cant Expect.
--> It depends on JVM and varied from JVM to Jvm.
														various methods for requesting JVM to run garbage collector
														============================================================

--> when can requesting JVM to run garbage collector but there is no guarauntee JVM will accepet or not.
--> But most of time JVM will accepet our request.

14 : whar are various methods for requesting JVM to run garbage collector?
-------------------------------------------------------------------------
--> they are two ways :

1 : By using system class : System.gc
------------------------------------
--> System class conatin a static method gc() to request a JVM to Run GC.
exm :	System.gc();
--> System.gc()  method is used to request Jvm to Run garbage collector.
--> in system class gc() method is a static method we can call using class name or refernce varaibale.

2 : By using Runtime class : Runtime.getRuntime().gc()
------------------------------------------------------
--> A java Application can communicate with JVM by using Runtime object.
--> Runtime class is present in java.lang package and it is a singleton class.
--> we can create a Runtime object by using getRuntime() factory method.
exm :	Runtime r = Runtime.getRuntime(); 
--> in Runtime class gc() methode is instance methode we can call using refernce varaibale.

 
--> onces we got Runtime object we can call following method on that object
1 : r.freeMemory()  : Returns Numbers of bytes of Free memomry in the heap.
2 : r.totalMemory() : Returns Total number of Bytes of Heap (Heap size)
3 : r.gc()          : Requesting  JVM to run Garbage collector.


15 : java application is communicate with JVm which object is required?
-----------------------------------------------------------------------
---> Runtime object is required to communicate with JVM.

16 :  what is mean by Singleton class?
-------------------------------------
--> For any class if we are allowed to create only one object  such type of class is called as singleton class.
--> we can create singleton class object using new keyword or constructor.
--> we can create a singleton class objcet using factory method.
exma :
		1 : Runtime


17 : what is mean by factory method?
-----------------------------------
--> using class name we are calling a methode that method return same class object such types of methode is called as factory method.
exm :
	Runtime r = Runtime.getRuntime();
	
exmple :
public class Test {
    public static void main(String[] args) {

        Runtime r = Runtime.getRuntime();

        System.out.println("Before creating a 10000 object the memory");

        long totalMemory = r.totalMemory(); // 100 bytes
        System.out.println("total memory in heap :"+totalMemory);

        long freeMemory = r.freeMemory(); //80bytes
        System.out.println("free memory in heap :"+freeMemory);

        for (int i=0; i<10000; i++)
        {
            Date date = new Date();
            date = null;
        }

        long freeMemory1 = r.freeMemory(); // 60bytes
        System.out.println("free memory in heap :"+freeMemory1);

        r.gc();
        System.out.println("free memory :"+r.freeMemory()); // 70bytes

    }
    // to run program execution jvm require some memory 
}

18 : which approach is recomnaded to request Jvm to run garbage collector?
--------------------------------------------------------------------------

--> whith respective to performance go for Runtime class approach
--> system class internaly call Runtime.getRuntime.gc() methode that for we can used Runtime class approach.


	
														finalization
													   ================
													   
19 : what is mean by finalization?
---------------------------------
--> Just before destroying an object garbage collector call finalize() to perfprm cleanup activities.
--> onces finalize() complete automatically GC destroye the objcet.
--> finalize() present in the Object class with the following property.
sybtax : 
		protected void finalize() throws Throwbale.
--> based on our Requirement we can override finalize() method in our class to define our own clean up activities.

finalize()
----------
--> Gc collector always call finalize() methode just before destroying an object to perform clean up activities onces finalize() method is complete Gc will destroye the object.
 
20 : what is mean by cleanup activities?
---------------------------------------
--> resource deallocation activities
like :
	1 : close data base connection
	2 : close network connection
	
	
21 : cases about finalize() methode
===================================
--> which class finalize() will be executed

case 1 : The object belong to which class that class finalize() methode will be call
-----------------------------------------------------------------------

A : String object is eligible for GC string class finalize() methode is call not a test call finalize() is calll.
----------------------------------------------------------------------------------------------------------------

public class Test1 {
    public static void main(String[] args) {
        String s = new String("Tanveer");
        s = null;
        System.gc();
        System.out.println("end of main method");
    }

    public void finalize(){
        System.out.println("finalize methode is call");
    }
}

outPut : end of main method

B : Test object is eligible for GC Test class finalize() methode is call.
------------------------------------------------------------------------

public class Test {
    public static void main(String[] args) {
		Test t = new Test();
        t = null;
        System.gc();
        System.out.println("end of main method");
    }

    public void finalize(){
        System.out.println("finalize methode is call");
    }
}

outPut : 
	end of main method
	finalize methode is call
	
	
case 2 : calling finalize() methode explicitly but object can not be destroye it execute like a normal method.
------------------------------------------------------------------------------------------------
--> we can call finalize() explicitly but object can can not be destroye .
--> it will be executing like a normal methode call.
--> but before destroying a object GC allways call finalize() method.

public class Test1 {
    public static void main(String[] args)  {
        Test1 t = new Test1();
        t.finalize();
        t.finalize();
        t = null;
        System.gc();
        System.out.println("end of main method");
    }

    public void finalize(){
        System.out.println("finalize methode is called");
    }

}


outPut : 
finalize methode is called
finalize methode is call
end of main method
finalize methode is call

23 : who call the finalize() methode?
-----------------------------------
-->finalize() is called by programmer or Gc.
1 : if programmer call the finalize() method object can not destroye it execute a normal methode.
2 : if Gc call finalize() methode after complete the finalize() method object will be destroye.

case 3 :
	--> If the Programmer call finalize() method explicitly and while excuting finalize() method if exception occures and which is uncaught [ there is no catch block ] then program will terminate abnormally.
	--> If grabage collect call finalize() method while excuting finalize() method if exception raised and which is uncaught then Jvm ignore that exception and rest of the program will be execute normally. 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--> if programmer called finalize() and while executing finalize() method if an exception raised which is uncaught [ arithamtic exception ] program  will be terminate abnormally.


exmp : 
	
	public class Test1 {
    public static void main(String[] args)  {
        Test1 t = new Test1();
        t.finalize();
		t = null;
        System.gc();
        System.out.println("end of main method");
    }

    public void finalize(){
        System.out.println("finalize methode is called");
		System.out.println(10/0);
    }
}

outPut : RE : Arithamtic exception divided by zero


--> if garbage collector called finalize() and while executing finalize() method if an exception raised which is uncaught [ arithamtic exception ] JVM will ignore that exception and rest of programmer will be normally.
 
exmp : 
	
	public class Test1 {
    public static void main(String[] args)  {
        Test1 t = new Test1();
		t = null;
        System.gc();
        System.out.println("end of main method");
    }

    public void finalize(){
        System.out.println("finalize methode is called");
		System.out.println(10/0);
    }
}

outPut :
	end of main method
	finalize methode is called
	
NOT : 
	--> if catch block is not there then the above senaerio is work .
	--> if catch block is there if Gc Or programmer is called in both catch block will be execute.


24 : jVM will ignore every exception or only uncaught exception while executing finalization() methode?
------------------------------------------------------------------------------------------------------
--> Jvm ignore only uncaught exception .

25 : differnce when program call finalize() and Gc call finalize() methode.
---------------------------------------------------------------------------
programmer
----------
	1 : when programmer call finalize() objcet can not be destroye.
	2 : when programmer call finalize() and while execution of finalize() methode if exception is occure and it is uncaught program will terminate abnormally.


Garbage collector
-----------------
	1 : when GC call finalize() after completion of finalize() method object will be destroye.
	2 : when garbage collector called finalize() and while executing finalize() method if an exception raised which is uncaught [ arithamtic exception ] JVM will ignore that exception and rest of programmer will be normally.


case 4 : on any objcet GC call finalize() method only onces, Even though that objcet Eligible for Gc Mutiple times.
-------------------------------------------------------------------------------------------------------------------
--> 
	exp : in this exmple objcet is eligible for two times but GC call finalize() only onces\

public class Test1 {
	static Test t;
	
    public static void main(String[] args) throws Exception  {
	
        Test1 t1 = new Test1();
		System.out.println(t1.hashcode());
		t1 = null;
        System.gc();
		Thread.sleep(5000);
		
		System.out.println(t.hashcode());
		t = null;
		System.gc()
		Thread.sleep(5000);

        System.out.println("end of main method");
    }

    public void finalize(){
        System.out.println("finalize methode is called");
		s = this;
		}
}

outPut :
	1234567
	finalize methode is called
	1234567
	end of main method


case 5 : we can not expect Exact Behavior of the Garbage collector beacause it is varied from JVM to JVM?
---------------------------------------------------------------------------------------------------------
--> hence for the following questions we cant answer exactly.

1 : Exactly at what time JVm Run Garbage collector?
--> it is varied from JVM to JVM

2 : In which order Garbage collector identifies Eligible objcets?
--> it is varied from JVM to JVM

3 : in which order Garbage collector Destroys the object?
--> there is no guarauntee to destroye all eligible object some time 15 , 60 etc.

4 : Wheather Garbage collector destroye All eligible objects or not?
--> there is no guarauntee to destroye all eligible object some time 15 , 60 etc.

5 : what is the algoruthm follwed by garbage collector?
--> 

NOTE : 
--> when program run  with low memomry jvm run gc.
--> it is varied from JVM to JVM but most of Gc follow " mark-sweep " algorithum.

public class Test {
	static int count = 0;
    public static void main(String[] args) throws Exception  {
	
		for( int i=0; i<=100000; i++ )
		{	
			Test t = new Test();
			t = null;
		}
		
	public void finalize(){
		count ++;
        System.out.println("finalize methode is called : "+ count);
		
		}
}

--> when memory problem is there jvm run gc ang gc called finalize() .
			
important :	Memory leaks		
case 6 : Memory leaks
----------------------
--> The objcet which are not using in our program and which are not eligible for Gc such type of useless object are called memomry Leaks.
--> In our Program if memomry Leaks Present then at certain point our program fail by raising RE : OutOfMemoryError.
--> To overcome this problem if an objcet  is no longer required then it is highly recomnaded to amke that object eligible fo GC.
--> In our program is memomry leaks present then it is Purely Programmer mistake.


--> memomry management tool
Hp : PATROL
IBM : Tivoli



questions
=========
1 : what is grabage collection and what are it advantages?
---------------------------------------------------------
--> Gc is java is automatic process of looking at heap memomry , identifying which object are in used and which are not , and deleting the unused object.
--> when program run  with low memomry jvm run gc.

Advantges
---------
--> the main advantages of Gc is remove the burden of manual memomry allocation and deallocation from us so that we can focus on problem solving.

2 : where are object created in memomry on stack or heap?
--------------------------------------------------------
--> whenever an object is created is always stored in the heap space and stack memomry conatin the refernce to it.
--> stack memomry contains only local varaibale , refernce varaibale\
--> all object are always create on heap memomry.

3 : which part of the memomry is involved in grabage collection stack or heap?
-----------------------------------------------------------------------------
--> heap memomry.

4 : who manage the garbage collector?
-------------------------------------
--> the JVM controls the garbage collector.
--> Jvm is decides when to run the grabage collector.
--> JVm run the garbage collector when it reakizes that the memomry is running low.

5 : how can the grabage collection to be request?
-------------------------------------------------

--> when can requesting JVM to run garbage collector but there is no guarauntee JVM will accepet or not.
--> But most of time JVM will accepet our request.

--> we can request by two ways
1 : By using system class : System.gc
2 : By using Runtime class : Runtime.getRuntime().gc()

6 : when does an objcet become eligible for garabage collection? 
		or
	what are the different ways to make an object eligible for GC when it is no longer needed?
---------------------------------------------------------------------------------------------
--> they are four way are there :
	1 : Nullifying the refernce varaibale
	2 : reasign the refernce varaibale
	3 : object created inside a method
	4 : Island of isolation
	
7 : what is purpose of overriding a finalize() methode?
-------------------------------------------------------
--> finalize() methode in java also called aas finalizer is a methode define in java.lang.Objcet
--> befor destroye the object that is eligible for Gc, GC call finalize() method to perform cleanup activities after completion of finalize() method Gc will destroye the object.

8 : How many times does the grabage collector call the finalize() method for an object?
----------------------------------------------------------------------------------------
--> only one time the finalize() methode will be call.

9 : what is responsibility of GC?
--------------------------------
--> destroye useless object.

10 : is garabage collector a forground or background thread?
------------------------------------------------------------
--> grabage collector is background / daemon thread.

11 : what is daemon thread?
---------------------------
--> daemon thread is a background thread.
--> A daemon threa run behind the application
--> daemon thread started by JVM.
--> daemon thread is stop when all forground thraed is stop.

12 : how Grabage collection works?
-----------------------------------
--> Gc work in 2 step 

1 : Marking : 
-------------
--> unrefernced object in heap are identifies and marked as ready for garabage collection.

2 : Deletion
-------------
--> in this step object are marked previously is deleted.

13 : can you name commonly used oracles JVM And which Gc strategey is used by it?
--------------------------------------------------------------------------------
--> "HotSpot" is most commonly used JVM by oracle.
--> All HotSpot Garbage collector implements " generational Garbage collection strategey ".
--> generationa GC strategey categorizes the object by age.

14 : why most GC uses generational GC strategey? [inside the methode object are created are short lived ]
------------------------------------------------
--> Reason for most GC using generational Gc strategey is that most of objects are short lived and hence die shortly just after memomry allocation.
--> This is called as " DIE YOUNG " .

15 : explain Generational GC strategey and HotSpot heap strture used bt these Gc? [ memomry management ]
--------------------------------------------------------------------------------------------------------
--> heap divide into two part	
	1 : Young generationa
		1 : Eden memory
		2 : Survivour memory S0
		3 : Survivour memory S1
	2 : old generationa
	
16 : Explain Gc process?
-----------------------
1 : new object created.
2 : new object in store in young generationa [ eden memomry ].
3 : when Eden space is completely fill up " Minor Gc is triggered " by jvm.
4 : In "minor Gc"  objcet present in Eden memomry unrefernced objects are deleted and refernce objects are moved to first survivor space (s0) marking them age is 1.
5 : when again eden space is filled up then again " Minor Gc is triggered " by jvm.
6 : unrefernced objcet from enden space is deleted.
7 : refernced objcet are again moved to survivor space but this time to second survivor space (s1) marking them age as 1.
8 : first survivor space ( s0 ) is again scanned in this cycle unrefernced objcet are deleted and refernced objcet moved from s0 to s1 and age is incremented from 1 to 2.
9 : when again eden space is filled up then again minor Gc is triggered but this time s1 has differently  age objcet but s0 is empty.
10: unrefernced object from eden space is deleted.
11: refernced object are moved from eden to s0 to s1 and age is incremented 0 to 1 , 1 to 2 and 2 to 3.
12: PROMOTION : when aged object in s0 or s1  reaches threshold ages supose 8 then during minor Gc these aged object will move from young generation to old generation.
13: when old generation is full then " major gc is triggered" by jvm . 

17 :  What is memory management in Java?
---------------------------------------
--> Memory management in Java is the process of allocating memory for objects during runtime, and deallocating memory for objects that are no longer in use.
--> Java uses an automatic memory management system known as the Garbage Collector to perform this task.

18 :  What is the heap memory in Java?
--------------------------------------
--> The heap memory in Java is the area of memory where objects are stored. 
--> All objects created in Java are stored in the heap memory.

19 : What is the stack memory in Java?
-------------------------------------
--> The stack memory in Java is the area of memory where primitive data types and references to objects are stored.
--> The stack memory is used to store local variables and method calls.

20 : What is the difference between heap and stack memory in Java?
------------------------------------------------------------------
--> The heap memory is used to store objects, while the stack memory is used to store primitive data types and references to objects.
--> Objects are allocated on the heap and references to those objects are stored on the stack.

21 : What is a memory leak in Java?
-----------------------------------
--> The objcet which are not using in our program and which are not eligible for Gc such type of useless object are called memomry Leaks.
--> In our Program if memomry Leaks Present then at certain point our program fail by raising RE : OutOfMemoryError.
--> To overcome this problem if an objcet  is no longer required then it is highly recomnaded to amke that object eligible fo GC.
--> In our program is memomry leaks present then it is Purely Programmer mistake.

22 : What is the finalize() method in Java?
------------------------------------------
--> Just before destroying an object garbage collector call finalize() to perfprm cleanup activities.
--> onces finalize() complete automatically GC destroye the objcet.

23 : How can you control the memory management in Java?
--------------------------------------------------------
--> Java provides a few ways to control the memory management, such as setting the minimum and maximum heap size using command line arguments, calling the System.gc() method to suggest Garbage Collector to run, and implementing object pooling to reuse objects instead of creating new ones.

24 : What is object pooling in Java?
------------------------------------
--> Object pooling in Java is a technique used to reuse objects instead of creating new ones
--> In object pooling, a pool of pre-allocated objects is created and managed by the application
--> When an object is needed, it is taken from the pool, and when it is no longer needed, it is returned to the pool.

25 : What is the PermGen space in Java?
---------------------------------------
--> The PermGen space (Permanent Generation space) in Java is a region of memory where class definitions, static variables, and string pool are stored. 
--> In Java 8 and later versions, the PermGen space has been replaced by the Metaspace.

26 : What is Metaspace in Java?
------------------------------
--> Metaspace in Java is a region of memory where class definitions, static variables, and string pool are stored, just like the PermGen space.
--> However, unlike the PermGen space, the Metaspace is not fixed in size and can expand or contract dynamically based on the needs of the application.

27 : What is the difference between the PermGen space and Metaspace in Java?
---------------------------------------------------------------------------
--> The PermGen space is fixed in size and can lead to out-of-memory errors if not properly configured, while the Metaspace can expand or contract dynamically. 
--> The Metaspace also provides better performance compared to the PermGen space.

28 : What is a memory footprint in Java?
----------------------------------------
--> A memory footprint in Java is the amount of memory used by a program to store its data and code.
--> The memory footprint is determined by factors such as the number of objects created, the size of those objects, and the amount of memory used by the program’s data structures.


29 :  What is the difference between the Young Generation and Old Generation in Java?
-------------------------------------------------------------------------------------
--> The Young Generation in Java is the area of memory where new objects are allocated.
--> The Old Generation, also known as the Tenured Generation, is the area of memory where long-lived objects are stored.
--> Objects that survive multiple garbage collection cycles are eventually moved from the Young Generation to the Old Generation.

