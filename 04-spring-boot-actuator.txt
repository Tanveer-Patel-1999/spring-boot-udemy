											Actuator
											=========
1 : what is used of actuator
-----------------------------
problem
-------
--> How can i " monitor and manage " my appliction?
--> How can i check the  " appliction health "?
--> how can i access " appliction matrics " ?


solution
--------
--> simply add a depemdency to your POM.xml file

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
	
--> Rest endpoint are automatically added to your appliction.
--> Spring boot Actuator automatically exposes endpoint to monitor and manage your appliction.
--> end point are prefixed with : /actuator

/health
-------
--> /health : health information about your appliction
--> /health end point check the status of your appliction
--> normally used by monitoring the appliction is up or down
--> by default only /health endpoint is exposed

/info
------
--> The /info endpoint can provide information about your appliction.
--> /info endpoint does not exposed by default
--> if you need to exposed /info end point the you have to add the properties in your appliction.properties
	
    management.endpoints.web.exposure.include = health,info
	management.info.env.enabled=true
	
	info.app.name=My Super cool app
	info.app.description = A crazy and fun app
	info.app.version=1.0.0
 
 /auditevents
 ------------
 --> Audit events for your appliction
 
 /bean
 ----
 --> list of all beans registered the spring appliction context
 
 /mappings
 ---------
 --> list of all @RequestMapping path
 
 
 note : By default only /health end is exposed
 --> to expose all actuator endpoint over HTTp use " wildcard : * " 
 --> management.endpoint.web.exposure.include=*
 
 
 2 : development process of Actuator in spring-boot-starter-actuator?
 -------------------------------------------------------------------
 --> Edit pom.xml and add spring-boot-starter-actuator dependency
 --> view actuator endpoint for :/health
 --> edit appliction.properties to enable all the end points : /actuator/info
 
			management.endpoint.web.exposure.include=*
 
 
 3 : what spring boot actuator security
 -----------------------------------------
 --> you many not want to expose all of this information.
 --> add spring security dependency to project and secured the endpoint.
 
   <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

--> default user : user
--> password : check console log for password

--> you can override default user name and password
--> edit appliction.properties

spring.security.user.name = Tanveer
spring.security.user.password = 1999


4 : how to excluding endpoints from the actuator?
------------------------------------------------
--> to excluding / health and /info end point
--> edit the pom.xml 
--> management.endpoint.web.exposure.exclude= health , info

5 : development process of Actuator in spring boot actuator security?
---------------------------------------------------------------------
--> edit a pom.xml and add spring-boot-starter-security dependency
--> Disable endpoints for /health and /info
--> eidt the appliction.properties : management.endpoint.web.exposure.exclude= health , info



			Running from command Line
			=========================
--> two options to run a spring boot appliction from command line
1 : use jar file 
	-----> java -jar jare_path_name
	
2 : use spring boot maven plugin
	-----> mvn spring-boot:run
	-----> mvn spring-boot:run
	
	
6 : how to read the value from custom appliction.properties file?
----------------------------------------------------------------
--> spring boot read information from  standard properties file : appliction.properties file
--> appliction.properties file located  : src/main/resources/appliction.properties
--> spring boot read the data from appliction.properties using " @Value("${}") " annoation.

7 : development process to read the data from appliction.properties?
-------------------------------------------------------------------
1 : define custom properties in the appliction.properties file
2 : Inject properties into spring boot appliction using @value annoation.


7 : spring boot properties
--------------------------
# Http server port
server.port = 1234

#context path of the appliction
server.servlet.context-path = / my-app

http://localhost:7070/my-app/




